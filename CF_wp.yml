AWSTemplateFormatVersion: '2010-09-09'
Description: 'My stack containing vpc, elb , lc with asg , and sql db for breakdown resist WP structure'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'VPC Parameters'
      Parameters:
      - ClassB
Parameters:
  ClassB:
    Description: 'Class B of VPC (10.XXX.0.0/16)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  myKeyPair: 
    Description: Amazon EC2 Key Pair
    Type: AWS::EC2::KeyPair::KeyName
  DBName:
    Description: db name
    Default: wordpress     
    Type: String
  DBUsername:
    Description: db master username
    Default: wordpress    
    Type: String
  DBPassword:
    Description: db master username password
    Type: String
    Default: wordpress
    NoEcho: true
    MinLength: 8
    MaxLength: 32
  DbGroupName:
    Description: db group name
    Default: wordpressGroup     
    Type: String
  BlogTitle:
    Description: 'The title of the WordPress blog.'
    Type: String
    Default: 'Just another WordPress blog'
  BlogAdminUsername:
    Description: 'A username for the WordPress admin.'
    Type: String
    Default: admin
  BlogAdminPassword:
    Description: 'A password for the WordPress admin.'
    Default: 7kxh8sVyIJzvdTjnM
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 32
  BlogAdminEMail:
    Description: 'The email address of the WordPress admin.'
    Default: zales1342@gmail.com
    Type: String
  DomainName:
    Description: Domain name
    Type: String
    Default: cloud4u.online.
  LoadBalancerCertificateArn:
    Description: 'Optional Amazon Resource Name (ARN) of the certificate to associate with the load balancer.'
    Type: String
    Default: arn:aws:acm:eu-west-1:390980294797:certificate/3c1badc9-6d47-438f-b67e-a2cdb62586a1
Conditions:
  HasKeyName: !Not [!Equals [!Ref myKeyPair, '']]
  HasHostedZone: !Not [!Equals [!Ref DomainName, '']]
  HasLoadBalancerCertificateArn: !Not [!Equals [!Ref LoadBalancerCertificateArn, '']]
Mappings:
  RegionMap:
    eu-west-1: #Ireland
      AMI: ami-07683a44e80cd32c5
    eu-west-2: #London
      AMI: ami-09ead922c1dad67e4        
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '10.${ClassB}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub '10.${ClassB}.0.0/16'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '10.${ClassB}.0.0/16'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetAPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.0.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'A public'
      - Key: Reach
        Value: public
  SubnetBPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.16.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'B public'
      - Key: Reach
        Value: public
  SubnetCPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.32.0/20'
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'C private '
      - Key: Reach
        Value: private
  SubnetDPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.48.0/20'
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'D private '
      - Key: Reach
        Value: private
  RouteTablePublic: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'A,B Public'
  RouteTablePrivate: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'C,D Private'
  RouteTableAssociationAPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      RouteTableId: !Ref RouteTablePublic
  RouteTableAssociationBPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      RouteTableId: !Ref RouteTablePublic
  RouteTableAssociationCPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetCPrivate
      RouteTableId: !Ref RouteTablePrivate
  RouteTableAssociationDPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetDPrivate
      RouteTableId: !Ref RouteTablePrivate
  RouteTablePublicInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  NAT:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP
        - AllocationId
      SubnetId:
        Ref: SubnetAPublic
      Tags:
        - Key: description
          Value: Internet Access for C,D subnets
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT
  EIPbastion:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
  BastionEipAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt EIPbastion.AllocationId
      NetworkInterfaceId: !Ref BastionNetworkInterface
    DependsOn:
      - EIPbastion
      - BastionNetworkInterface
  BastionNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetAPublic
      GroupSet:
        - !GetAtt BastionSecurityGroup.GroupId
      SourceDestCheck: true
      Tags:
        - Key: Name
          Value: Bastion 
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  SubnetNetworkAclAssociationAPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationBPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationCPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetCPrivate
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationDPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetDPrivate
      NetworkAclId: !Ref NetworkAclPublic
  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  LoadBalancer: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups: 
        - !Ref ALBSecurityGroup 
      Subnets: 
        - !Ref SubnetAPublic
        - !Ref SubnetBPublic
  LoadBalancerListener80: 
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect 
          RedirectConfig:
            Protocol: HTTPS
            StatusCode: HTTP_301
            Port: 443
  LoadBalancerListener443: 
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasLoadBalancerCertificateArn
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Certificates:
        - CertificateArn: !Ref LoadBalancerCertificateArn
      Port: 443
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: '/'
      UnhealthyThresholdCount: 5
      HealthCheckTimeoutSeconds: 15
      HealthCheckIntervalSeconds: 20
      Matcher:
        HttpCode: '200,301'
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Bastion Instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  EC2SecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: EC2 Instance
  EC2InboundRule: 
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId:
        !GetAtt
        - ALBSecurityGroup
        - GroupId
      GroupId:
        !GetAtt
        - EC2SecurityGroup
        - GroupId
  EC2InboundRuleSSH: 
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId:
        !GetAtt
        - BastionSecurityGroup
        - GroupId
      GroupId:
        !GetAtt
        - EC2SecurityGroup
        - GroupId
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: 
      - DBInstance
      - EFSMountTargetA
      - EFSMountTargetB
    CreationPolicy: 
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 50   
      ResourceSignal:
        Count: 2
        Timeout: PT5M
    Properties:
      VPCZoneIdentifier:
        - !Ref SubnetCPrivate
        - !Ref SubnetDPrivate
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 2
      MaxSize: 8
      Cooldown: '60'
      HealthCheckGracePeriod: 120
      HealthCheckType: ELB
      TargetGroupARNs: 
        - !Ref TargetGroup
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata: 
      Comment: Install packages for WP configuration
      AWS::CloudFormation::Init:
        config: 
          packages: 
            yum:
              php: []
              php-gd: []
              php-mysqlnd: []
              mariadb: []
              httpd: []
          files: 
            '/root/wordpress.sh':
              content: !Sub
              - |
                  #!/bin/bash -ex
                  # ensure than only one machine installs wp
                  if mkdir /var/www/lock; then
                    cd /var/www/html
                    wget -q -T 60 https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
                    if ! php wp-cli.phar core is-installed --allow-root; then
                      php wp-cli.phar core download --allow-root --version=5.1.1
                      php wp-cli.phar core config --dbname='${DBName}' --dbuser='${DBUsername}' --dbpass='${DBMasterUserPassword}' --dbhost='${DBHost}' --allow-root
                      php wp-cli.phar core install --url='http://${DomainN}' --title='${BlogTitle}' --admin_user='${BlogAdminUsername}' --admin_password='${BlogAdminPassword}' --admin_email='${BlogAdminEMail}' --skip-email --allow-root
                      sed -i "/$table_prefix = 'wp_';/a\$_SERVER['HTTPS'] = 'on';" /var/www/html/wp-config.php
                      sed -i '1h;1!H;$!d;x;s/.*$table_prefix[^\n]*/&\ndefine('\''WP_SITEURL'\'', '\''http:\/\/'\'' . $_SERVER['\''SERVER_NAME'\'']);/' /var/www/html/wp-config.php
                      sed -i '1h;1!H;$!d;x;s/.*$table_prefix[^\n]*/&\ndefine('\''WP_HOME'\'', '\''http:\/\/'\'' . $_SERVER['\''SERVER_NAME'\'']);/' /var/www/html/wp-config.php
                    fi
                    chown -R apache:apache /var/www/html
                    chmod u+wrx /var/www/html/wp-content/*
                    rm -f wp-cli.phar
                  fi
              - BlogTitle: !Ref BlogTitle
                BlogAdminUsername: !Ref BlogAdminUsername
                BlogAdminPassword: !Ref BlogAdminPassword
                BlogAdminEMail: !Ref BlogAdminEMail
                DBUsername: !Ref DBUsername
                DBName: !Ref DBName
                DBMasterUserPassword: !Ref DBPassword
                DBHost: !GetAtt 'DBInstance.Endpoint.Address' 
                DomainN: !If [HasHostedZone, !Ref DomainName , !GetAtt LoadBalancer.DNSName ]
              mode: '000500'
              owner: root
              group: root
          commands:
            01_wordpress:
              command: '/root/wordpress.sh'
              cwd: '/var/www/html'
          services: 
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      KeyName: !If [HasKeyName, !Ref myKeyPair, !Ref 'AWS::NoValue']
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref EC2SecurityGroup
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - AMI
      UserData:
        'Fn::Base64': 
          !Sub 
            - |
               #!/bin/bash -xe                        
               yum update -y
               yum install -y aws-cfn-bootstrap
               mkdir /var/www
               echo ${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /var/www/ nfs nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0 >> /etc/fstab
               while ! (echo > /dev/tcp/${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com/2049) >/dev/null 2>&1; do sleep 10; done
               mount /var/www/
               /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}
               /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
            - EFSFileSystem: !Ref EFSFileSystem
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName:
        !Ref DBName
      Engine: MySQL
      MasterUsername:
        !Ref DBUsername
      DBInstanceClass: db.t2.micro
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      AllocatedStorage: "20"
      StorageType: gp2
      MasterUserPassword:
        !Ref DBPassword
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: true
  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'wordpress-rds'
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId:
          !GetAtt
          - EC2SecurityGroup
          - GroupId 
  DBSubnetGroup:    
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: "Subnet group for WP"
      DBSubnetGroupName: !Ref DbGroupName
      SubnetIds:
        - !Ref SubnetCPrivate
        - !Ref SubnetDPrivate
  EFSFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        SourceSecurityGroupId:
          !GetAtt
          - EC2SecurityGroup
          - GroupId        
  EFSMountTargetA:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref SubnetCPrivate
      SecurityGroups:
      - !Ref MountTargetSecurityGroup
  EFSMountTargetB:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref SubnetDPrivate
      SecurityGroups:
      - !Ref MountTargetSecurityGroup 
  RecordSet:
    Type: 'AWS::Route53::RecordSet'
    Condition: HasHostedZone
    Properties:
      AliasTarget:
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt LoadBalancer.DNSName
      HostedZoneName: !Ref DomainName
      Name: !Ref DomainName
      Type: A 
  ASGScaleInPolicy: 
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: "SimpleScaling"
      Cooldown: "60" 
      ScalingAdjustment: "2" 
  ASGScaleOutPolicy: 
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: "SimpleScaling"
      Cooldown: "60" 
      ScalingAdjustment: "-1"
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '60'
      AlarmDescription: Alarm if CPU too high 
      Period: '60'
      AlarmActions:
      - Ref: ASGScaleInPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '3'
      Statistic: Average
      Threshold: '40'
      AlarmDescription: Alarm if CPU too low
      Period: '60'
      AlarmActions:
      - Ref: ASGScaleOutPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingGroup
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
  LaunchConfigurationBastion:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: BastionEipAssociation
    Properties:
      KeyName: !If [HasKeyName, !Ref myKeyPair, !Ref 'AWS::NoValue']
      InstanceType: t2.micro
      IamInstanceProfile: !Ref NetworkInstanceProfile
      SecurityGroups:
        - !Ref BastionSecurityGroup
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - AMI
      UserData:
        'Fn::Base64': !Sub 
            - |
               #!/bin/bash -xe                        
               yum update -y
               instance_id=$(curl http://169.254.169.254/latest/meta-data/instance-id)
               aws ec2 attach-network-interface --network-interface-id ${eni_id} --instance-id $instance_id --device-index 1 --region ${AWS::Region}
            -  eni_id: !Ref BastionNetworkInterface            
  AutoScalingGroupBastion:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref SubnetAPublic
      LaunchConfigurationName: !Ref LaunchConfigurationBastion
      MinSize: 1
      MaxSize: 1
      Cooldown: '60'
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      Tags:
      - Key: Name
        Value: Bastion
        PropagateAtLaunch: "true"
  NetworkRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "AttachNetworkInterface"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "ec2:AttachNetworkInterface"
                Resource: "*"
  NetworkInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles:
        - 
           !Ref NetworkRole